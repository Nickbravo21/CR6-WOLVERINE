#include <Wire.h>
#include <Servo.h>

const int MPU_ADDR = 0x68; // MPU6050 I2C address
Servo myServo;

int16_t accelX, accelY, accelZ;
int16_t gyroX, gyroY, gyroZ;
float angle; // Variable for pitch angle

void setup() {
  Wire.begin();
  Serial.begin(9600);

  // Initialize MPU6050
  Wire.beginTransmission(MPU_ADDR);
  Wire.write(0x6B); // Power management register
  Wire.write(0);    // Wake up MPU6050
  Wire.endTransmission(true);

  // Attach servo to pin 9
  myServo.attach(9);
  myServo.write(90); // Initialize servo to midpoint
}

void loop() {
  // Request data from MPU6050
  Wire.beginTransmission(MPU_ADDR);
  Wire.write(0x3B); // Starting register for accelerometer data
  Wire.endTransmission(false);
  Wire.requestFrom(MPU_ADDR, 6, true); // Request 6 registers

  // Read accelerometer values
  accelX = Wire.read() << 8 | Wire.read();
  accelY = Wire.read() << 8 | Wire.read();
  accelZ = Wire.read() << 8 | Wire.read();

  // Calculate pitch angle using accelerometer data
  angle = atan2(accelY, sqrt(accelX * accelX + accelZ * accelZ)) * 180 / PI;

  // Map pitch angle to servo angle (0 to 180 degrees)
  int servoAngle = map(angle, -90, 90, 0, 180);
  servoAngle = constrain(servoAngle, 0, 180);

  // Move servo
  myServo.write(servoAngle);

  // Debugging output
  Serial.print("Pitch Angle: ");
  Serial.println(angle);
  Serial.print("Servo Angle: ");
  Serial.println(servoAngle);

  delay(100); // Small delay for stability
}